!wget -nc
https://dcc.ligo.org/public/0146/P1700349/001/H-H1_LOSC_CLN_4_V1-118700704
0-2048.gwf
!wget -nc
https://dcc.ligo.org/public/0146/P1700349/001/L-L1_LOSC_CLN_4_V1-118700704
0-2048.gwf

#Question 1 part 1
#Extracting data and functions from import files (Precious Preliminary Preparations :P)

%matplotlib inline
import pylab
import numpy as np
import plotly
import plotly.graph_objects as go
import pandas

from pycbc.filter import highpass, matched_filter, resample_to_delta_t, sigma
from pycbc.catalog import Merger
from pycbc.frame import read_frame
from pycbc.psd import interpolate, inverse_spectrum_truncation
from pycbc.waveform import get_fd_waveform, get_td_waveform
from pycbc.conversions import mass1_from_mchirp_q


 #Defining the data, IFO = detector name
 
merger = Merger("GW170817")
strain, stilde = {}, {}
for ifo in ['H1', 'L1']:
 
	ts = read_frame("{}-{}_LOSC_CLN_4_V1-1187007040-2048.gwf".format(ifo[0], ifo), 	'{}:LOSC-STRAIN'.format(ifo),
 	start_time=merger.time - 224,
 	end_time=merger.time + 32,
 	check_integrity=False) #
#High pass filter
	strain[ifo] = resample_to_delta_t(highpass(ts, 20.0), 1.0/2048)
#cropping 4 seconds from each end to remove artifacts 
	strain[ifo] = strain[ifo].crop(4, 4)
#Creating a frequency domain version f the data	
 	stilde[ifo] = strain[ifo].to_frequencyseries()
	
#printing the resulting time domain series
pylab.plot(strain['H1'].sample_times, strain['H1'])
pylab.xlabel('Time (s)')
pylab.show()

#Question 1 part 2 
#(Estimating PSD)

#Calculate the psd from the data -- Median Welch style estimate
#interpolate the PSD to the frequency step size we need.
psds = {}
for ifo in ['L1', 'H1']:
	psds[ifo] = interpolate(strain[ifo].psd(2), stilde[ifo].delta_f)
	
#Take care of corruption and overwhitening by manually setting a 2 second "buffer"
	psds[ifo] = inverse_spectrum_truncation(psds[ifo], int(2 * strain[ifo].sample_rate),
	low_frequency_cutoff=15.0,
	trunc_method='hann')
#Displaying our figures	
pylab.loglog(psds[ifo].sample_frequencies, psds[ifo], label=ifo)
pylab.xlim(20, 1024)
pylab.ylim(1e-47, 1e-42)
pylab.legend()



#Setting mass range between 1.3 and 1.5 solar masses
masses = numpy.arange(1.3, 1.5, .01)

hmax, smax, tmax, mmax, nsnr = None, {}, {}, 0, 0
snrs = []
#Creating a template waveform using a Taylor approximation 
for m in masses:
	hp, hc = get_fd_waveform(approximant="TaylorF2", mass1=m, mass2=m, f_lower=20, delta_f=stilde[ifo].delta_f)
	hp.resize(len(stilde[ifo]))
	
#Looking for the point of maximum Signal to Noise ratio to look for possible matches with the template waveforms
	max_snr, max_time = {}, {}
	for ifo in ['L1', 'H1']:
		snr = matched_filter(hp, stilde[ifo], psd=psds[ifo],low_frequency_cutoff=20.0)

		snr = snr.time_slice(merger.time - 1, merger.time + 1)
		_, idx = snr.abs_max_loc()
		max_snr[ifo] = snr[idx]
#Find at what time this peak SNR occurs
		max_time[ifo] = float(idx) / snr.sample_rate + snr.start_time
	network_snr = (abs(numpy.array(list(max_snr.values()))) ** 2.0).sum() ** 0.5
	snrs.append(max_snr)
#Selecting the maximum peak only
	if network_snr > nsnr:
		tmax, hmax, mmax, smax = max_time, hp, m, max_snr
		nsnr = network_snr

# Finding where the peak SNR allows us (with the exception of redshift corrections at very large distances) to define what the masses that make up the system are 
print("We found that the best match for Mass1=Mass2 was %2.2f solar masses (in the detector
frame)" % mmax)


# print(snrs)
to_plot = []
for i in range(len(snrs)):
    to_plot.append((abs(snrs[i]['H1'])**2 + abs(snrs[i]['L1'])**2)**0.5)
# nsnr = (numpy.array(snrs['H1'])**2 + numpy.array(snrs['L1'])**2)**0.5
print(to_plot)



m = 1.4 # Solar masses
conditioned = strain['H1']
hp, hc = get_td_waveform(approximant="TaylorT2",
                     mass1=m,
                     mass2=m,
                     delta_t=conditioned.delta_t,
                     f_lower=20.0)

# We will resize the vector to match our data
hp.resize(len(conditioned))
#Shift the SNR time series towards the merger point and print a graph
template = hp .cyclic_time_shift(hp.start_time)
pylab.plot(hp.sample_times, template)
pylab.xlabel('time')
pylab.ylabel('strain')
pylab.show()

#Cropping data removes artifacts + extra 4 secs off the top
ifo = 'L1'                            
conditioned = strain[ifo]
snr = matched_filter(template, conditioned,
                     psd=psds[ifo] , low_frequency_cutoff=15)
snr = snr.crop(4 + 4, 4)

#plotting 
pylab.figure(figsize=[10, 4])
pylab.plot(snr.sample_times, abs(snr))
pylab.ylabel('Signal-to-noise')
pylab.xlabel('Time (s)')
pylab.show()

peak = abs(snr).numpy().argmax()
snrp = snr[peak]
time = snr.sample_times[peak]

print("We found a signal at {}s with SNR {}".format(time, 
                                                    abs(snrp)))


dt = time - conditioned.start_time
aligned = template.cyclic_time_shift(dt)
aligned /= sigma(aligned, psd=psds[ifo], low_frequency_cutoff=20.0)
aligned = (aligned.to_frequencyseries() * snrp).to_timeseries()
aligned.start_time = conditioned.start_time

white_data = (conditioned.to_frequencyseries() / psds[ifo]**0.5).to_timeseries()
tapered = aligned.highpass_fir(30, 512, remove_corrupted=False)
white_template = (tapered.to_frequencyseries() / psds[ifo]**0.5).to_timeseries()

white_data = white_data.highpass_fir(30., 512).lowpass_fir(300, 512)

white_data = white_data.time_slice(merger.time-.2, merger.time+.1)
white_template = white_template.time_slice(merger.time-.2, merger.time+.1)

pylab.figure(figsize=[15, 3])
pylab.plot(white_data.sample_times, white_data, label="Data")
pylab.plot(white_template.sample_times, white_template, label="Template")
pylab.legend()
pylab.show()


subtracted = conditioned - aligned

# Plot the original data and the subtracted signal data

for data, title in [(conditioned, 'Original H1 Data'),
                    (subtracted, 'Signal Subtracted from H1 Data')]:

    t, f, p = data.whiten(4, 4).qtransform(.001,
                                                  logfsteps=100,
                                                  qrange=(8, 8),
                                                  frange=(20, 512))
    pylab.figure(figsize=[15, 3])
    pylab.title(title)
    pylab.pcolormesh(t, f, p**0.5, vmin=1, vmax=6)
    pylab.yscale('log')
    pylab.xlabel('Time (s)')
    pylab.ylabel('Frequency (Hz)')
    pylab.xlim(merger.time - 2, merger.time + 1)
    pylab.show()


#Question 1 part 3

#Definitions
from pycbc.filter import match
from pycbc.psd import aLIGOZeroDetHighPower

#Defining two wavefunctions so they can be compared
hp, hc  =  get_td_waveform(approximant = "EOBNRv2",
                           mass1 = 10,
                           mass2 = 10,
                           f_lower = f_low,
                           delta_t = 1.0/sample_rate)
matches = []
masses = np.arange(5, 15, 0.2)

for mass in masses:
    sp, sc = get_td_waveform(approximant = "TaylorT4",
                             mass1 = mass,
                             mass2 = mass,
                             f_lower = f_low,
                             delta_t = 1.0/sample_rate)

#Resizing the waveforms to the same length
    tlen = max(len(sp),len(hp))
    sp.resize(tlen)
    hp.resize(tlen)
	
#Generate the aLIGO Zero det. high power PSD
    delta_f = 1.0/sp.duration
    flen = tlen // 2 + 1
    psd = aLIGOZeroDetHighPower(flen, delta_f, f_low)
	
#Sifting through the wf's (SLOWWWWW)
    m,i = match(hp, sp, psd=psd, low_frequency_cutoff = f_low)
    matches.append(m)
	
#Plotting our GWWF against the templates
g1 = go.Figure()
fig1.add_trace(go.Scatter(x=masses,
                          y=matches,
                          mode='markers',
                          name="LIGO_Hanford"))
fig1.update_layout(xaxis_title='Mass',
                   yaxis_title='Match',
                   title="Correlation Between GW Waveform and Nearby Template")
fig2.write_html("Q1_8_waveform_correlation.html")
In [19]:
IFrame(src='./Q1_8_waveform_correlation.html', width="100%", height=500)
#Q2.1.1

#Imports
import numpy as np
import pycbc.types 

##Converting data into time series
d = np.load('noise_ts_4096Hz.npy')
dt = d[:, 0]
time = d[:,0]
strain = d[:,1]
d = pycbc.types.TimeSeries(d[:, 1], delta_t = dt[1]- dt[0])
data = d
strain = resample_to_delta_t(highpass(data, 20.0), 1.0/2048)
stilde = strain.to_frequencyseries()

##Estimate the PSD to frequency step 
psds = interpolate(strain.psd(2), stilde.delta_f)

## We'll choose how much data is corrupted by overwhitening
psds = inverse_spectrum_truncation(psds, 
                                   int(2 *strain.sample_rate),
                                   low_frequency_cutoff=15.0,
                                   trunc_method='hann')
##Plotting our PSD								   
fig2 = go.Figure()
fig2.add_trace(go.Scattergl(x=psds.sample_frequencies,
                            y=psds,
                            mode='lines',
                            name="LIGO_Hanford"))
fig2.update_xaxes(type="log", range=[1.3,3])
fig2.update_yaxes(type="log", range=[-47,-42])
fig2.update_layout(xaxis_title='Frequency [Hz]',
                   yaxis_title='Amplitude',
                   title="Power Spectral Density")
fig2.write_html("Q2.1_Power_Spectral_Density.html")	


IFrame(src='./Q2_1_Power_Spectral_Density.html', width="100%", height=500)
						   
#Q2.1.2
#MATCH FILTERING

#Defos
import pycbc.noise
import pycbc.psd
import pycbc.filter
import pycbc.waveform
import pylab
flow = 30 #Hz
stilde = data.to_frequencyseries()

#Generating template and rezising 
hp, hc = pycbc.waveform.get_fd_waveform(approximant="TaylorF2",
                             mass1=10, mass2=10,
                             f_lower=flow, delta_f=stilde.delta_f)

hp.resize(len(stilde))  
snr = pycbc.filter.matched_filter(hp, stilde, psd=psds,
                                      low_frequency_cutoff=flow)


# Removing the regions corrupted by filter wraparound
snr = snr[len(snr) // 4: len(snr) * 3 // 4]

#Plotting our results, finding the max value of SNR 
pylab.plot(snr.sample_times, abs(snr))
pylab.ylabel('signal-to-noise ratio')
pylab.xlabel('time (s)')
pylab.show()
print ( 'Maximum SNR', max(abs(snr)) )
IFrame(src='./Q2_2_SNR_Plot.html', width="100%", height=500)

##Q2.2

#Defintitions
from pycbc.psd import welch, interpolate
import matplotlib.pyplot as plt

psds = interpolate(welch(data), 1.0 / data.duration) #???? fixed the issue of not same size
white_data = (data.to_frequencyseries() / psds**0.5).to_timeseries()

sigma = np.std(white_data)
mu = np.mean(white_data)

print("sigma = " + str(sigma),"; mu = " + str(mu))

fig = go.Figure(data=[go.Histogram(x=white_data, histnorm='probability')])
fig.update_xaxes(range=[-200,200])
fig.update_layout(xaxis_title='noise',
                   yaxis_title='probability',
                   title="Whitened data histogram: &#963; = 60.4794879 and &#956; = 0.05229178")

fig.write_html("Q2_3_whiteNoise_Hist.html")
IFrame(src='./Q2_3_whiteNoise_Hist.html', width="100%", height=500)

##Q2.3

#Defos and generting wf

from pycbc.filter import sigmasq
hp, hc = get_fd_waveform(approximant="TaylorF2",
                         mass1=3,
                         mass2=3,
                         delta_f=0.001,
                         distance = 500,
                         f_lower=20.0, 
                         f_final = 2048.0) #Luminosity distance = 500 Mpc

nb_slice = 1000
slice_size = int(len(data)/nb_slice)

SNRs =[]

for i in range(nb_slice):
    data_slice = data[slice_size*i:slice_size*(i+1)]
#Calculating PSD    
    psds = interpolate(welch(data_slice), hp.delta_f)
    #print(psds.delta_f)
    
    SNR = (pycbc.filter.sigmasq(hp, psds))**0.5
    SNRs.append(SNR)

#Printing sigma & mu values
sigma = np.std(SNRs)
mu = np.mean(SNRs)
print("sigma = " + str(sigma),"; mu = " + str(mu))

#plotting
fig = go.Figure(data=[go.Histogram(x=SNRs, histnorm='probability')])
# fig.update_xaxes(range=[-0,200])
fig.update_layout(xaxis_title='SNR',
                   yaxis_title='probability',
                   title="Estimated SNR histogram: &#963; = 1.6560736 and &#956; = 15.6536511")
fig.write_html("Q2_4_estSNR_Hist.html")

IFrame(src='./Q2_4_estSNR_Hist.html', width="100%", height=500)
